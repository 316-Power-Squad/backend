{"version":3,"sources":["../server/rankingScraper.js"],"names":["specialCases","dbMode","process","argv","length","fetchRankings","url","gender","resolve","reject","uri","resolveWithFullResponse","response","statusCode","$","load","body","regionName","teamName","counter","regionCount","each","i","elem","includes","attr","text","toLowerCase","children","first","team","has","get","insertRank","region","rank","lastIndex","lastIndexOf","actualRegion","substring","console","log","query","err","getMostRecentUrls","urls","sourceUrl","allArchivesDiv","paragraphs","link","undefined","indexOf","push","insertRankings","connect","mode"],"mappings":"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","file":"rankingScraper.js","sourcesContent":["import request from 'request-promise';\nimport cheerio from 'cheerio';\nimport db, { MODE_TEST, MODE_PRODUCTION } from './helpers/db';\n\nconst specialCases = new Map([\n  ['Miami (Ohio)', 'Miami OH'],\n  ['Boston University', 'Boston U'],\n  ['Dartmouth', 'Dartmouth College'],\n  ['Manhattan', 'Manhattan College'],\n  ['Ole Miss', 'Mississippi'],\n  ['UT Martin', 'Tennessee Martin'],\n  ['ETSU', 'East Tenn St'],\n  ['Louisiana-Lafayette', 'UL Lafayette'],\n  ['NC State', 'North Carolina St'],\n  ['Middle Tennessee', 'Mid Tenn St'],\n  ['Saint Joseph’s', 'St Josephs PA'],\n  ['Ohio State', 'Ohio State University'],\n  ['Maryland', 'Maryland College Park'],\n  ['Loyola-Chicago', 'Loyola University Chicago'],\n  ['Nevada', 'Nevada Las Vegas'],\n  ['Mississippi State', 'Mississippi Valley State'],\n  ['Southern Miss', 'Southern Mississippi'],\n  ['UAB', 'Alabama Birmingham'],\n  ['SMU', 'Southern Methodist'],\n  ['TCU', 'Texas Christian'],\n  ['Texas A&M-Corpus Christi', 'Texas A&M University–Corpus Christi'],\n  ['Stephen F. Austin', 'Stephen F. Austin State'],\n  ['Davidson', 'Davidson College'],\n]);\n\nconst dbMode =\n  process.argv[process.argv.length - 1] === 'prod'\n    ? MODE_PRODUCTION\n    : MODE_TEST;\n\nconst fetchRankings = (url, gender) => {\n  return new Promise(async (resolve, reject) => {\n    const response = await request({ uri: url, resolveWithFullResponse: true });\n    if (response.statusCode !== 200) reject('Incorrect status');\n    let $ = cheerio.load(response.body);\n    let regionName = '';\n    let teamName = '';\n    let counter = 0;\n    let regionCount = 0;\n    $('td').each(async function(i, elem) {\n      if (['#f2dddc', '#A6CAFF'].includes($(this).attr('bgcolor'))) {\n        counter = 0;\n        regionCount++;\n        regionName = $(this)\n          .text()\n          .toLowerCase();\n      }\n      if (counter >= 15) {\n        if (regionCount > 8) resolve();\n        return;\n      }\n      if (\n        $(this)\n          .children()\n          .first()\n          .attr('target') === '_blank'\n      ) {\n        teamName = $(this)\n          .children()\n          .first()\n          .text();\n        counter++;\n\n        if (regionName !== '' && teamName !== '') {\n          try {\n            // If there is a naming disparity look it up\n            const team = specialCases.has(teamName)\n              ? specialCases.get(teamName)\n              : teamName;\n            await insertRank(team, gender, regionName, counter);\n          } catch (err) {\n            reject(err);\n          }\n        }\n      }\n    });\n  });\n};\n\nconst insertRank = async (team, gender, region, rank) => {\n  const lastIndex = region.lastIndexOf(' ');\n  let actualRegion = region.substring(0, lastIndex);\n  console.log(\n    `Inserting a team ${team} with region ${actualRegion} and rank ${rank}`\n  );\n  // if (gender === 'womens') console.log('womens team inserted');\n  return new Promise((resolve, reject) => {\n    db.get().query(\n      `INSERT INTO RegionalRank (team_id, region_id, rank) values (\n          ( SELECT id from Team WHERE Team.name=? AND Team.gender=? ), \n          ( SELECT id from Region WHERE Region.name=? ), \n          ?\n        )`,\n      [team, gender, actualRegion, rank],\n      err => {\n        if (err) {\n          console.log(err);\n          reject(err);\n        } else resolve();\n      }\n    );\n  });\n};\n\n// line 5 shouldn't be hardcoded -- in the future it should call a helper message like the following to get the url\n\nconst getMostRecentUrls = async () => {\n  return new Promise(async (resolve, reject) => {\n    let urls = [];\n    let sourceUrl =\n      'http://www.ustfccca.org/category/rankings-polls/cross-country-polls/div-1-cross-country';\n    const response = await request({\n      uri: sourceUrl,\n      resolveWithFullResponse: true,\n    });\n    if (response.statusCode !== 200) reject('Incorrect status code');\n    let $ = cheerio.load(response.body);\n    let allArchivesDiv = $('div[class=facetwp-template]');\n    let paragraphs = allArchivesDiv.children();\n    paragraphs.each(function(i, elem) {\n      let link = $(this)\n        .children()\n        .first();\n      if (link !== undefined) {\n        let url = link.attr('href');\n        if (url !== undefined && url.indexOf('regional') > -1) {\n          urls.push(url);\n        } else if (url !== undefined && url.indexOf('region') > -1) {\n          urls.push(url);\n          resolve(urls);\n        }\n      }\n    });\n  });\n};\n\nconst insertRankings = mode => {\n  db.connect(mode, async () => {\n    try {\n      const urls = await getMostRecentUrls();\n      await fetchRankings(urls[1], 'mens');\n      await fetchRankings(urls[0], 'womens');\n    } catch (err) {\n      console.log(err);\n    }\n  });\n};\n\ninsertRankings(dbMode);\n"]}