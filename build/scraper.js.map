{"version":3,"sources":["../server/scraper.js"],"names":["mode","process","argv","length","urls","teamBaseUrl","resultBaseUrl","notTitle","s","getAbbrev","state","states","answer","get","getCalifornia","school","splitSchool","split","usableWords","i","includes","push","join","concat","getNC","getWisco","getTexas","splice","getTeamName","getSchoolNames","resolve","reject","names","count","err","resp","body","statusCode","$","load","each","row","text","data","splitData","console","log","parseDate","date","Date","earliestDate","delay","ms","setTimeout","sleep","Math","random","parseMonth","month","formatDate","parts","replace","result","fetchMeets","url","endsWith","toLowerCase","meets","meetDates","finalRegion","splitUrl","team","splitRegion","region","getTime","meetName","meetUrl","find","attr","set","dates","joinLists","list1","list2","convertTime","time","splitTime","minutes","parseInt","seconds","populateTeams","t","teamNames","getResults","teams","newMeets","insertTeam","scrapeResult","results","mens","womens","link","rank","trim","error","insertRegions","query","insertMeet","name","gender","lastIndex","lastIndexOf","actualRegion","substring","insertParticipates","meet","place","teamName","mapResults","meetData","newResult","insertResults","keys","r","mensTeam","womensTeam","connect","disconnect"],"mappings":"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","file":"scraper.js","sourcesContent":["import request from 'request';\nimport cheerio from 'cheerio';\nimport db, { MODE_TEST, MODE_PRODUCTION } from './helpers/db';\n\nconst mode =\n  process.argv[process.argv.length - 1] === 'prod'\n    ? MODE_PRODUCTION\n    : MODE_TEST;\n\nlet urls = [];\n// ex. https://www.tfrrs.org/teams/xc/NC_college_m_Duke.html\nlet teamBaseUrl = 'https://www.tfrrs.org/teams/xc/';\n\n//ex. https://www.tfrrs.org/results/xc/11563.html\nlet resultBaseUrl = 'https://www.tfrrs.org/results/xc/';\n\nconst notTitle = function(s) {\n  if (\n    s == 'Primary Conference' ||\n    s == 'Making Transition' ||\n    s == 'Full Membership' ||\n    s == 'Future Conference'\n  ) {\n    return false;\n  }\n  if (\n    s == 'Savannah State University' ||\n    s == 'California Baptist University' ||\n    s == 'North Alabama !University of North Alabama'\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst getAbbrev = function(state) {\n  const states = new Map([\n    ['Arizona', 'AZ'],\n    ['Alabama', 'AL'],\n    ['Alaska', 'AK'],\n    ['Arizona', 'AZ'],\n    ['Arkansas', 'AR'],\n    ['California', 'CA'],\n    ['Colorado', 'CO'],\n    ['Connecticut', 'CT'],\n    ['Delaware', 'DE'],\n    ['Florida', 'FL'],\n    ['Georgia', 'GA'],\n    ['Hawaii', 'HI'],\n    ['Idaho', 'ID'],\n    ['Illinois', 'IL'],\n    ['Indiana', 'IN'],\n    ['Iowa', 'IA'],\n    ['Kansas', 'KS'],\n    ['Kentucky', 'KY'],\n    ['Kentucky', 'KY'],\n    ['Louisiana', 'LA'],\n    ['Maine', 'ME'],\n    ['Maryland', 'MD'],\n    ['Massachusetts', 'MA'],\n    ['Michigan', 'MI'],\n    ['Minnesota', 'MN'],\n    ['Mississippi', 'MS'],\n    ['Missouri', 'MO'],\n    ['Montana', 'MT'],\n    ['Nebraska', 'NE'],\n    ['Nevada', 'NV'],\n    ['New Hampshire', 'NH'],\n    ['New Jersey', 'NJ'],\n    ['New Mexico', 'NM'],\n    ['New York', 'NY'],\n    ['North Carolina', 'NC'],\n    ['North Dakota', 'ND'],\n    ['Ohio', 'OH'],\n    ['Oklahoma', 'OK'],\n    ['Oregon', 'OR'],\n    ['Pennsylvania', 'PA'],\n    ['Rhode Island', 'RI'],\n    ['South Carolina', 'SC'],\n    ['South Dakota', 'SD'],\n    ['Tennessee', 'TN'],\n    ['Texas', 'TX'],\n    ['Utah', 'UT'],\n    ['Vermont', 'VT'],\n    ['Virginia', 'VA'],\n    ['Washington', 'WA'],\n    ['District of Columbia', 'DC'],\n    ['West Virginia', 'WV'],\n    ['Wisconsin', 'WI'],\n    ['Wyoming', 'WY'],\n  ]);\n  let answer = states.get(state);\n  return answer ? answer : '';\n};\n\nconst getCalifornia = function(school) {\n  let splitSchool = school.split(' ');\n  let usableWords = [];\n  for (var i = 0; i < splitSchool.length; i++) {\n    if (splitSchool[i].includes('!')) {\n      break;\n    } else {\n      usableWords.push(splitSchool[i]);\n    }\n  }\n  if (school.includes('Los Angeles')) {\n    return 'UCLA';\n  }\n  if (school.includes('Berkeley')) {\n    return 'California';\n  }\n  if (school.includes('University of California')) {\n    usableWords[0] = 'UC';\n    return usableWords.join('_');\n  }\n  if (school.includes('California State University')) {\n    if (\n      splitSchool[splitSchool.length - 1] == 'Fresno' ||\n      splitSchool[splitSchool.length - 1] == 'Sacramento' ||\n      splitSchool[splitSchool.length - 1] == 'Long Beach'\n    ) {\n      return splitSchool[splitSchool.length - 1].concat('_State');\n    } else {\n      return 'Cal_St_'.concat(splitSchool[splitSchool.length - 1]);\n    }\n  }\n};\n\nconst getNC = function(school) {\n  let splitSchool = school.split(' ');\n  if (school.includes('Chapel Hill')) {\n    return 'North Carolina';\n  } else if (school.includes('Charlotte')) {\n    return 'Charlotte';\n  } else {\n    return 'UNC_'.concat(splitSchool[2]);\n  }\n};\n\nconst getWisco = function(school) {\n  let splitSchool = school.split(' ');\n  if (school.includes('Madison')) {\n    return 'Wisconsin';\n  } else {\n    return 'Wis_'.concat(splitSchool[1]);\n  }\n};\n\nconst getTexas = function(school) {\n  let splitSchool = school.split(' ');\n  let usableWords = [];\n  for (var i = 0; i < splitSchool.length; i++) {\n    if (splitSchool[i].includes('!')) {\n      break;\n    } else {\n      usableWords.push(splitSchool[i]);\n    }\n  }\n  if (school.includes('Austin')) {\n    return 'Texas';\n  } else if (school.includes('El Paso')) {\n    return 'UTEP';\n  } else {\n    return 'UT_'.concat(\n      usableWords.splice(1, usableWords.length - 1).join('_')\n    );\n  }\n};\n\nconst getTeamName = function(school) {\n  let usableWords = [];\n  let splitSchool = school.split(' ');\n  if (school == 'Boston University') {\n    return 'Boston_U';\n  }\n  if (school.includes('Brigham Young')) {\n    return 'BYU';\n  }\n  if (\n    school.includes('California State University') ||\n    school.includes('University of California')\n  ) {\n    return getCalifornia(school);\n  }\n  if (school.includes('California Polytechnic')) {\n    return 'Cal_Poly';\n  }\n  if (school.includes('University of North Carolina')) {\n    return getNC(school);\n  }\n  if (school.includes('University of Wisconsin')) {\n    return getWisco(school);\n  }\n  if (school.includes('University of Texas')) {\n    return getTexas(school);\n  }\n  if (splitSchool[0] == 'Pennsylvania') {\n    splitSchool[0] = 'Penn';\n  }\n  if (school == 'University of Mississippi') {\n    return 'Ole_Miss';\n  }\n  if (school == 'Mississippi State University') {\n    return 'Miss_State';\n  }\n  if (school == 'Colorado Boulder !University of Colorado Boulder') {\n    return 'Colorado';\n  }\n  if (school.includes('Virginia Tech')) {\n    return 'Virginia_Tech';\n  }\n  if (school.includes('East Tennessee State University')) {\n    return 'East_Tenn_St';\n  }\n  if (school.includes('Providence College')) {\n    return 'Providence';\n  }\n  if (school.includes('Iona College')) {\n    return 'Iona';\n  }\n  if (school.includes('Army')) {\n    return 'Army_West_Point';\n  }\n  if (school.includes('Indiana University Purdue University Indianapolis')) {\n    return 'IUPUI';\n  }\n  if (school.includes('Bowling Green')) {\n    return 'Bowling_Green';\n  }\n  if (school.includes('Miami University')) {\n    return 'Miami_OH';\n  }\n  if (school.includes('Ohio University')) {\n    return 'Ohio';\n  }\n  if (school.includes('Bloomington')) {\n    return 'Indiana';\n  }\n  if (school.includes('University–Stillwater')) {\n    return 'Oklahoma_State';\n  }\n  if (school.includes('Urbana')) {\n    return 'Illinois';\n  }\n  if (school.includes('Lincoln')) {\n    return 'Nebraska';\n  }\n  if (school.includes('Kansas City')) {\n    return 'UMKC';\n  }\n  if (school.includes('Lowell')) {\n    return 'UMass_Lowell';\n  }\n  if (school.includes('Middle Tennessee')) {\n    return 'Mid_Tenn_State';\n  }\n  if (school.includes('Georgia Institute of Technology')) {\n    return 'Georgia_Tech';\n  }\n  if (school.includes('University of Louisiana at Lafayette')) {\n    return 'UL_Lafayette';\n  }\n  if (school.includes('Louisiana State University')) {\n    return 'LSU';\n  }\n  if (school.includes('Charlotte')) {\n    return 'Charlotte';\n  }\n  if (school.includes(`Saint Joseph's University`)) {\n    return 'St_Josephs_PA';\n  }\n  for (var i = 0; i < splitSchool.length; i++) {\n    if (splitSchool[i].includes('!')) {\n      return usableWords.join('_');\n    } else {\n      usableWords.push(splitSchool[i]);\n    }\n  }\n  if (usableWords[usableWords.length - 1] == 'University') {\n    usableWords[usableWords.length - 1] = '';\n    usableWords = usableWords.splice(0, usableWords.length - 1);\n    return usableWords.join('_');\n  }\n  return school;\n};\n\nconst getSchoolNames = async () => {\n  return new Promise((resolve, reject) => {\n    let names = [];\n    let count = 0;\n    request(\n      'https://en.wikipedia.org/wiki/List_of_NCAA_Division_I_institutions',\n      function(err, resp, body) {\n        if (!err && resp.statusCode == 200) {\n          var $ = cheerio.load(body);\n          var count = 0;\n          $('tr', '.sortable').each(function() {\n            const row = $(this)\n              .text()\n              .split('\\n');\n            const data = [\n              getTeamName(row[1])\n                .split(' ')\n                .join('_'),\n              getAbbrev(row[4]),\n            ];\n            names.push(data);\n            let splitData = data[0].split('_');\n            if (splitData[splitData.length - 1] == 'State') {\n              splitData[splitData.length - 1] = 'St';\n              names.push([splitData.join('_'), getAbbrev(row[4])]);\n            }\n            count++;\n          });\n          resolve(names);\n        } else {\n          console.log(resp.statusCode);\n          reject(err);\n        }\n      }\n    );\n  });\n};\n\nconst parseDate = function(date) {\n  return new Date(date);\n};\n\nconst earliestDate = parseDate('09/08/2017');\n\nconst delay = function(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nconst sleep = async () => {\n  console.log('Taking a break...');\n  await delay((Math.random() * 5 + 1) * 1000);\n  console.log('Two second later');\n};\n\nconst parseMonth = function(month) {\n  if (month == 'Jan') {\n    return '1';\n  }\n  if (month == 'Feb') {\n    return '2';\n  }\n  if (month == 'Mar') {\n    return '3';\n  }\n  if (month == 'Apr') {\n    return '4';\n  }\n  if (month == 'May') {\n    return '5';\n  }\n  if (month == 'Jun') {\n    return '6';\n  }\n  if (month == 'Jul') {\n    return '7';\n  }\n  if (month == 'Aug') {\n    return '8';\n  }\n  if (month == 'Sep') {\n    return '9';\n  }\n  if (month == 'Oct') {\n    return '10';\n  }\n  if (month == 'Nov') {\n    return '11';\n  }\n  if (month == 'Dec') {\n    return '12';\n  }\n};\n\nconst formatDate = function(date) {\n  if (date == '#' || date.split(' ').length != 3 || date.includes('-')) {\n    return '01/01/2000';\n  }\n  let parts = date.split(' ');\n  parts[0] = parseMonth(parts[0]);\n  parts[1] = parts[1].replace(',', '');\n  let result = parts.join('/');\n  return result;\n};\n\nconst fetchMeets = async url => {\n  return new Promise((resolve, reject) => {\n    if (url.endsWith('Northwestern')) {\n      url = url.replace('Northwestern', 'Northwestern_IL');\n    } else if (url.endsWith('California')) {\n      url = url.replace('California', 'California_CA');\n    } else if (url.endsWith('Ohio')) {\n      url = url.replace('Ohio', 'Ohio_U');\n    } else if (url.toLowerCase().includes('in_college_f_indiana')) {\n      url = url\n        .toLowerCase()\n        .replace('in_college_f_indiana', 'IN_college_f_Indiana_IN');\n    } else if (url.endsWith('Miami')) {\n      url = url.replace('Miami', 'Miami_FL');\n    } else if (url.endsWith('William_and_Mary')) {\n      url.replace('William_and_Mary', 'William__Mary');\n    } else if (url.includes('Joseph')) {\n      url.replace(`Saint_Joseph's`, 'St_Josephs_PA');\n    } else if (url.includes('Manhattan_College')) {\n      url = url.replace('Manhattan College', 'Manhattan');\n    }\n    if (url.includes('Notre_Dame')) {\n      url = url.replace('Notre_Dame_IN');\n    }\n    if (url.endsWith('Georgetown')) {\n      url = url.replace('Georgetown', 'Georgetown_DC');\n    }\n    let meets = new Map();\n    let meetDates = new Map();\n    let finalRegion = '';\n    request(url, async (err, resp, body) => {\n      let splitUrl = url.split('_');\n      let team = splitUrl.splice(3, splitUrl.length).join('_');\n      if (!err && resp.statusCode == 200 && team) {\n        let $ = cheerio.load(body);\n        $('a', 'span.panel-heading-normal-text').each(function() {\n          let splitRegion = $(this)\n            .text()\n            .split(' ');\n          let region = splitRegion.splice(1, splitRegion.length).join(' ');\n          if (splitRegion.includes('DI')) {\n            finalRegion = region.toLowerCase();\n          }\n        });\n        $('tr').each(function() {\n          let row = $(this)\n            .text()\n            .split('\\n');\n          let date = parseDate(formatDate(row[1]));\n          if (!date) {\n          } else if (date.getTime() >= earliestDate.getTime()) {\n            let meetName = row[3];\n            let meetUrl = $(this)\n              .find('a')\n              .attr('href')\n              .replace('//', '');\n            if (meetUrl.includes('www')) {\n              meets.set(meetName, 'https://'.concat(meetUrl));\n              meetDates.set(\n                meetName,\n                formatDate(row[1])\n                  .split('/')\n                  .join('-')\n              );\n            }\n          }\n        });\n      }\n      resolve({\n        dates: meetDates,\n        meets: meets,\n        region: finalRegion,\n      });\n    });\n  });\n};\n\nconst joinLists = function(list1, list2) {\n  for (let i = 0; i < list2.length; i++) {\n    if (!list1.includes(list2[i])) {\n      list1.push(list2[i]);\n    }\n  }\n  return list1;\n};\n\nconst convertTime = function(time) {\n  let splitTime = time.split(':');\n  let minutes = parseInt(splitTime[0]) * 60;\n  let seconds = parseInt(splitTime[1]);\n  return minutes + seconds;\n};\n\nconst populateTeams = function(t) {\n  let teamNames = [];\n  for (let i = 0; i < t.length; i++) {\n    teamNames.push(t[i][0]);\n  }\n  return teamNames;\n};\n\nconst getResults = async () => {\n  const teams = await getSchoolNames();\n  let teamNames = populateTeams(teams);\n  let meets = new Map();\n  let meetDates = new Map();\n  for (var i = 0; i < teams.length; i++) {\n    let region = '';\n    if (teams[i][0] === 'School') continue;\n    let url = teamBaseUrl\n      .concat(teams[i][1])\n      .concat('_college_m_')\n      .concat(teams[i][0]);\n    let newMeets = await fetchMeets(url);\n    meets = new Map([...meets, ...newMeets.meets]);\n    meetDates = new Map([...meetDates, ...newMeets.dates]);\n    region = newMeets.region;\n    url = teamBaseUrl\n      .concat(teams[i][1])\n      .concat('_college_f_')\n      .concat(teams[i][0]);\n    newMeets = await fetchMeets(url);\n    meets = new Map([...meets, ...newMeets.meets]);\n    meetDates = new Map([...meetDates, ...newMeets.dates]);\n    region = region ? region : newMeets.region;\n    try {\n      await insertTeam(teams[i][0], 'mens', region);\n      await insertTeam(teams[i][0], 'womens', region);\n    } catch (err) {\n      console.log(err);\n      console.log(`Error inserting team ${teams[i][0]}`);\n    }\n  }\n  return [meets, meetDates];\n};\n\nconst scrapeResult = async (meetUrl, meetName) => {\n  const teams = await getSchoolNames();\n  let teamNames = populateTeams(teams);\n  return new Promise((resolve, reject) => {\n    request(meetUrl, function(err, resp, body) {\n      let results = new Map();\n      let count = 0;\n      if (!err && resp.statusCode == 200) {\n        let $ = cheerio.load(body);\n        let mens = new Map();\n        let womens = new Map();\n        results.set(meetName, [mens, womens]);\n        $('tr').each(function() {\n          const data = $(this);\n          let row = data.text().split('\\n');\n          if (row.length == 40) {\n            count++;\n          }\n          let link = data.find('a').attr('href');\n          if (count <= 11000) {\n            try {\n              let rank = parseInt(row[2]);\n              let school = row[5]\n                .trim()\n                .split(' ')\n                .join('_')\n                .split('.')\n                .join('');\n              count++;\n              if (teamNames.includes(school)) {\n                if (link.toLowerCase().includes('_f_')) {\n                  results.get(meetName)[1].set(school, rank);\n                } else if (link.toLowerCase().includes('_m_')) {\n                  results.get(meetName)[0].set(school, rank);\n                }\n              }\n            } catch (error) {}\n          }\n        });\n      }\n      resolve(results);\n    });\n  });\n};\n\nconst insertRegions = async region => {\n  console.log(`Inserting Regions`);\n  return new Promise((resolve, reject) => {\n    db.get().query(\n      `INSERT INTO Region (name) values\n      ('northeast'),\n      ('mid-atlantic'),\n      ('southeast'),\n      ('south'),\n      ('south central'),\n      ('great lakes'),\n      ('midwest'),\n      ('mountain'),\n      ('west'),\n      ('N/A')\n    `,\n      [],\n      err => {\n        if (err) reject(err);\n        else resolve();\n      }\n    );\n  });\n};\n\nconst insertMeet = async (name, date) => {\n  console.log(`Inserting a meet ${name}`);\n  return new Promise((resolve, reject) => {\n    db\n      .get()\n      .query(\n        `INSERT INTO Meet (name, date) values (?, ?)`,\n        [name, date],\n        err => {\n          if (err) reject(err);\n          else resolve();\n        }\n      );\n  });\n};\n\nconst insertTeam = async (name, gender, region) => {\n  const lastIndex = region.lastIndexOf(' ');\n  let actualRegion = region.substring(0, lastIndex);\n  if (!actualRegion) {\n    actualRegion = 'N/A';\n  }\n  const team = name.replace(/_/g, ' ');\n  console.log(`Inserting a team ${team} with region ${region}`);\n  return new Promise((resolve, reject) => {\n    db.get().query(\n      `INSERT INTO Team (name, gender, region_id) values (?, ?, (\n          SELECT id from Region WHERE Region.name=?\n        ))`,\n      [team, gender, actualRegion],\n      err => {\n        if (err) reject(err);\n        else resolve();\n      }\n    );\n  });\n};\n\nconst insertParticipates = async (meet, team, gender, place) => {\n  console.log(\n    `Inserting a participates record ${meet}, ${team}, ${gender}, ${place}`\n  );\n  const teamName = team.replace(/_/g, ' ');\n  return new Promise((resolve, reject) => {\n    let query = `INSERT INTO Participates (team_id, meet_id, placement) values (\n      (SELECT ID FROM Team WHERE name=? and gender=?),\n      (SELECT ID FROM Meet WHERE name=?),\n      ?\n    )`;\n    db.get().query(query, [teamName, gender, meet, place], (err, result) => {\n      if (err) reject(err);\n      else resolve();\n    });\n  });\n};\n\nconst mapResults = async () => {\n  return new Promise(async (resolve, reject) => {\n    let results = new Map();\n    const meetData = await getResults();\n    const meets = meetData[0];\n    const meetDates = meetData[1];\n    for (let [meetName, meetUrl] of meets) {\n      try {\n        await insertMeet(meetName, meetDates.get(meetName));\n      } catch (err) {\n        console.log('Error inserting meet', err);\n      }\n      console.log('Scraping ', meetUrl);\n      let newResult = await scrapeResult(meetUrl, meetName);\n      results = new Map([...results, ...newResult]);\n      console.log(results);\n    }\n    resolve(results);\n  });\n};\n\nconst insertResults = async () => {\n  return new Promise(async (resolve, reject) => {\n    await insertRegions();\n    let results = await mapResults();\n    //console.log(results);\n    for (let meet of results.keys()) {\n      let r = results.get(meet);\n      console.log(meet);\n      for (let mensTeam of r[0].keys()) {\n        try {\n          await insertParticipates(meet, mensTeam, 'mens', r[0].get(mensTeam));\n        } catch (err) {\n          console.log(`Error inserting men's participation`, err);\n        }\n      }\n      for (let womensTeam of r[1].keys()) {\n        try {\n          await insertParticipates(\n            meet,\n            womensTeam,\n            'womens',\n            r[1].get(womensTeam)\n          );\n        } catch (err) {\n          console.log(`Error inserting women's participation`, err);\n        }\n      }\n    }\n    resolve();\n  });\n};\n\ndb.connect(mode, async () => {\n  await insertResults();\n  db.disconnect();\n});\n"]}