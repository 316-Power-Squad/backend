{"version":3,"sources":["../../../server/models/Team/Team.js"],"names":["getTeam","resolve","reject","queryAsync","id","res","length","getTeamStats","err","getMeets","allTeams","get","query","rows","done"],"mappings":";;;;;;;;;;;;;;;;;;;AAGA;;;;AAEA;;;;AAEO,IAAMA,4BAAU,SAAVA,OAAU,KAAM;AAC3B,SAAO;AAAA,0EAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEG,aAAGC,UAAH,kCAA+C,CAACC,EAAD,CAA/C,CAFH;;AAAA;AAETC,iBAFS;;AAGf,kBAAIA,IAAIC,MAAJ,KAAe,CAAnB,EAAsB;AACpBJ;AACD,eAFD,MAEO;AACLD,wBAAQI,IAAI,CAAJ,CAAR;AACD;AAPc;AAAA;;AAAA;AAAA;AAAA;;AASfH;;AATe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAYD,CAbM;;AAeP;AAtBA;;;AAuBO,IAAMK,sCAAe,SAAfA,YAAe,GAAM;AAChC,SAAO,sBAAY,UAACN,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI;AACF,UAAMG,MAAM,aAAGF,UAAH,KAAkB,EAAlB,CAAZ;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY,CAAE;AACjB,GAJM,CAAP;AAKD,CANM;;AAQA,IAAMC,8BAAW,SAAXA,QAAW,KAAM;AAC5B,SAAO,sBAAY,UAACR,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI;AACF,UAAMG,MAAM,aAAGF,UAAH,mRASV,CAACC,EAAD,CATU,CAAZ;AAWAH,cAAQI,GAAR;AACD,KAbD,CAaE,OAAOG,GAAP,EAAY;AACZN,aAAOM,GAAP;AACD;AACF,GAjBM,CAAP;AAkBD,CAnBM;;AAqBA,IAAME,8BAAW,SAAXA,QAAW,OAAQ;AAC9B,eAAGC,GAAH,GAASC,KAAT,uBAAqC,UAACJ,GAAD,EAAMK,IAAN,EAAe;AAClD,QAAIL,GAAJ,EAAS,OAAOM,KAAK,EAAL,eAAP;AACTA,SAAKD,IAAL;AACD,GAHD;AAID,CALM;;kBAOQ;AACbb,kBADa;AAEbS,oBAFa;AAGbC;AAHa,C","file":"Team.js","sourcesContent":["/**\n * Example model for querying the teams\n */\nimport db from '../../helpers/db';\nimport { sqlError } from '../../helpers/db';\nimport { noTeamError, nameError } from './errors';\n\nexport const getTeam = id => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await db.queryAsync(`SELECT * from Team WHERE ID=?`, [id]);\n      if (res.length === 0) {\n        reject(noTeamError);\n      } else {\n        resolve(res[0]);\n      }\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\n// Get team stats for a graph\nexport const getTeamStats = () => {\n  return new Promise((resolve, reject) => {\n    try {\n      const res = db.queryAsync(``, []);\n    } catch (err) {}\n  });\n};\n\nexport const getMeets = id => {\n  return new Promise((resolve, reject) => {\n    try {\n      const res = db.queryAsync(\n        `\n        SELECT Participates.meet_id, Participates.placement, Meet.name as meet, Meet.date\n        FROM Participates, Meet \n        WHERE Participates.team_id=?\n          AND Meet.id = Participates.meet_id \n        ORDER BY Meet.id DESC \n        LIMIT 10\n        `,\n        [id]\n      );\n      resolve(res);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nexport const allTeams = done => {\n  db.get().query(`SELECT * FROM Team`, (err, rows) => {\n    if (err) return done([], sqlError);\n    done(rows);\n  });\n};\n\nexport default {\n  getTeam,\n  getMeets,\n  allTeams,\n};\n"]}