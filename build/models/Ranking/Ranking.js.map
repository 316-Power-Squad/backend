{"version":3,"sources":["../../../server/models/Ranking/Ranking.js"],"names":["formatRegions","res","rows","row","region_name","team_name","curr_teams","push","getRegionals","resolve","reject","queryAsync","gender","formatMeets","meet_name","meet_date","getMeets"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;;;;AAKA,IAAMA,gBAAgB,SAAhBA,aAAgB,OAAQ;AAC5B,MAAIC,MAAM,EAAV;AAD4B;AAAA;AAAA;;AAAA;AAE5B,oDAAgBC,IAAhB,4GAAsB;AAAA,UAAbC,GAAa;;AACpB,UAAI,CAACF,IAAIE,IAAIC,WAAR,CAAL,EAA2B;AACzBH,YAAIE,IAAIC,WAAR,IAAuB,CAACD,IAAIE,SAAL,CAAvB;AACD,OAFD,MAEO;AACL,YAAIC,aAAaL,IAAIE,IAAIC,WAAR,CAAjB;AACAE,mBAAWC,IAAX,CAAgBJ,IAAIE,SAApB;AACAJ,YAAIE,IAAIC,WAAR,IAAuBE,UAAvB;AACD;AACF;AAV2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAW5B,SAAOL,GAAP;AACD,CAZD;;AAcO,IAAMO,sCAAe,SAAfA,YAAe,SAAU;AACpC,SAAO;AAAA,0EAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEI,aAAGC,UAAH,0UAUjB,CAACC,MAAD,CAViB,CAFJ;;AAAA;AAETV,kBAFS;;AAcfO,sBAAQT,cAAcE,IAAd,CAAR;AAde;AAAA;;AAAA;AAAA;AAAA;;AAgBfQ;;AAhBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAmBD,CApBM;;AAsBP;;;;;AAKA,IAAMG,cAAc,SAAdA,WAAc,OAAQ;AAC1B,MAAIZ,MAAM,EAAV;AAD0B;AAAA;AAAA;;AAAA;AAE1B,qDAAgBC,IAAhB,iHAAsB;AAAA,UAAbC,GAAa;;AACpB,UAAI,CAACF,IAAIE,IAAIW,SAAR,CAAL,EAAyB;AACvBb,YAAIE,IAAIW,SAAR,IAAqB,CAACX,IAAIY,SAAL,EAAgB,CAACZ,IAAIE,SAAL,CAAhB,CAArB;AACD,OAFD,MAEO;AACL,YAAIC,aAAaL,IAAIE,IAAIW,SAAR,EAAmB,CAAnB,CAAjB;AACAR,mBAAWC,IAAX,CAAgBJ,IAAIE,SAApB;AACAJ,YAAIE,IAAIW,SAAR,EAAmB,CAAnB,IAAwBR,UAAxB;AACD;AACF;AAVyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAW1B,SAAOL,GAAP;AACD,CAZD;;AAcO,IAAMe;AAAA,yEAAW,kBAAMJ,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA,8CACf;AAAA,qFAAY,kBAAOH,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEI,aAAGC,UAAH,4ZAYjB,CAACC,MAAD,CAZiB,CAFJ;;AAAA;AAETV,4BAFS;;AAgBfO,gCAAQI,YAAYX,IAAZ,CAAR;AAhBe;AAAA;;AAAA;AAAA;AAAA;;AAkBfQ;;AAlBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBADe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAwBQ;AACbF,4BADa;AAEbQ;AAFa,C","file":"Ranking.js","sourcesContent":["import db from '../../helpers/db';\n\n/**\n * Helper function to format the output of the database in a way that the\n * algorithm can actually read\n * @param {* Array} rows\n */\nconst formatRegions = rows => {\n  let res = {};\n  for (let row of rows) {\n    if (!res[row.region_name]) {\n      res[row.region_name] = [row.team_name];\n    } else {\n      let curr_teams = res[row.region_name];\n      curr_teams.push(row.team_name);\n      res[row.region_name] = curr_teams;\n    }\n  }\n  return res;\n};\n\nexport const getRegionals = gender => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const rows = await db.queryAsync(\n        `SELECT Region.name as region_name, \n          Team.name as team_name\n         FROM Region, Team, RegionalRank\n         WHERE Region.id = Team.region_id\n         AND Team.id = RegionalRank.team_id\n         AND Team.gender=?\n         AND Region.name <> 'N/A' \n         ORDER BY Region.name, RegionalRank.rank\n        `,\n        [gender]\n      );\n      resolve(formatRegions(rows));\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\n/**\n * Helper function to format the output of the database in a way that the\n * algorithm can actually read\n * @param {* Array} rows\n */\nconst formatMeets = rows => {\n  let res = {};\n  for (let row of rows) {\n    if (!res[row.meet_name]) {\n      res[row.meet_name] = [row.meet_date, [row.team_name]];\n    } else {\n      let curr_teams = res[row.meet_name][1];\n      curr_teams.push(row.team_name);\n      res[row.meet_name][1] = curr_teams;\n    }\n  }\n  return res;\n};\n\nexport const getMeets = async gender => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const rows = await db.queryAsync(\n        `SELECT Team.name as team_name,\n            Meet.id as meet_id, \n            Meet.date as meet_date,\n            Meet.name as meet_name, \n            Participates.placement \n          FROM Meet, Participates, Team \n          WHERE Participates.meet_id = Meet.id\n          AND Participates.team_id = Team.id\n          AND Team.gender = ?\n          ORDER BY Meet.name, Participates.placement\n        `,\n        [gender]\n      );\n      resolve(formatMeets(rows));\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nexport default {\n  getRegionals,\n  getMeets,\n};\n"]}