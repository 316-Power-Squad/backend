{"version":3,"sources":["../../server/helpers/schema.js"],"names":["createDatabaseQueries","Schemas","Views","asyncQuery","conn","query","resolve","reject","err","rows","executeQueries","queryArray","seed","prod","mode","initialConnection","createConnection","host","user","password","process","env","MYSQL_PASSWORD","seedConnection","DATABASE_HOST","MYSQL_USERNAME","database","end","exit","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;;AAEO,IAAMA,wDAAwB,4IAA9B,C,CAXP;;;;AAkBO,IAAMC,4BAAU,mqCAAhB;;AAsDA,IAAMC,wBAAQ,EAAd;;AAEP,IAAMC,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAOC,KAAP,EAAiB;AAClC,SAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCH,SAAKC,KAAL,CAAWA,KAAX,EAAkB,UAACG,GAAD,EAAMC,IAAN,EAAe;AAC/B,UAAID,GAAJ,EAASD,OAAOC,GAAP,EAAT,KACKF,QAAQG,IAAR;AACN,KAHD;AAID,GALM,CAAP;AAMD,CAPD;;AASA,IAAMC;AAAA,wEAAiB,kBAAON,IAAP,EAAaO,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA,8CACd;AAAA,qFAAY,iBAAOL,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DACCI,UADD;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACRN,6BADQ;AAAA;AAAA;AAAA,+BAGPF,WAAWC,IAAX,EAAiBC,KAAjB,CAHO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKbE;;AALa;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAQjBD;;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAaA;AACO,IAAMM,sBAAO,SAAPA,IAAO,OAAQ;AAC1B,MAAMC,OAAOC,4BAAb;AACA;AACA;AACA,MAAMC,oBAAoBF,OACtB,IADsB,GAEtB,gBAAMG,gBAAN,CAAuB;AACrBC,UAAM,WADe;AAErBC,UAAM,MAFe;AAGrBC,cAAUC,QAAQC,GAAR,CAAYC;AAHD,GAAvB,CAFJ;;AAQA,MAAMC,iBAAiB,gBAAMP,gBAAN,CAAuB;AAC5CC,UAAMJ,OAAOO,QAAQC,GAAR,CAAYG,aAAnB,GAAmC,WADG;AAE5CN,UAAML,OAAOO,QAAQC,GAAR,CAAYI,cAAnB,GAAoC,MAFE;AAG5CN,cAAUC,QAAQC,GAAR,CAAYC,cAHsB;AAI5CI,cAAUb;AAJkC,GAAvB,CAAvB;;AAOA,SAAO;AAAA,2EAAY,kBAAOP,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEVM,IAFU;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGPH,eAAeK,iBAAf,EAAkCf,qBAAlC,CAHO;;AAAA;AAIbe,gCAAkBY,GAAlB;;AAJa;AAAA;AAAA,qBAMTjB,eAAea,cAAf,EAA+BtB,OAA/B,CANS;;AAAA;AAAA;AAAA,qBAOTS,eAAea,cAAf,EAA+BrB,KAA/B,CAPS;;AAAA;AAQfqB,6BAAeI,GAAf;AACAP,sBAAQQ,IAAR,CAAa,CAAb;AATe;AAAA;;AAAA;AAAA;AAAA;;AAWfC,sBAAQC,GAAR;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAcD,CAjCM","file":"schema.js","sourcesContent":["/**\n * In this file we define the schema for the database. We also provide a function for\n * intitializing the schema. Need to worry about updating the schema as well (migrations)\n */\nimport async from 'async';\nimport mysql from 'mysql';\nimport db, { MODE_TEST, MODE_PRODUCTION, TEST_DB, PRODUCTION_DB } from './db';\n\n// Put all table creation code here. Make sure to include the line where we drop\n// the table if it exists - otherwise our create table query will fail\n\nexport const createDatabaseQueries = [\n  `DROP DATABASE IF EXISTS atlargetest`,\n  `DROP DATABASE IF EXISTS atlargeprod`,\n  `CREATE DATABASE atlargetest`,\n  `CREATE DATABASE atlargeprod`,\n];\n\nexport const Schemas = [\n  `DROP TABLE IF EXISTS User, Team, Region, RegionalRank, Meet, Participates`,\n  `\n  CREATE TABLE User (\n    email varchar(255) NOT NULL,\n    name varchar(255) NOT NULL,\n    hash varchar(255) NOT NULL,\n    PRIMARY KEY (email)\n  )\n`,\n  `\n  CREATE TABLE Team (\n    ID int NOT NULL AUTO_INCREMENT,\n    name varchar(255) NOT NULL,\n    region_id int NOT NULL REFERENCES Region(id),\n    gender ENUM('mens', 'womens') NOT NULL,\n    PRIMARY KEY (ID),\n    UNIQUE(name, gender)\n  )\n`,\n  `\n  CREATE TABLE Region (\n    ID int NOT NULL AUTO_INCREMENT,\n    name varchar(255) NOT NULL,\n    PRIMARY KEY (ID),\n    UNIQUE(name)\n  )\n`,\n  `\n  CREATE TABLE RegionalRank (\n    team_id int NOT NULL REFERENCES Team(id),\n    region_id int NOT NULL REFERENCES Region(id),\n    rank int NOT NULL,\n    PRIMARY KEY (team_id)\n  )\n`,\n  `\n  CREATE TABLE Meet (\n    ID int NOT NULL AUTO_INCREMENT,\n    name varchar(255) NOT NULL,\n    date varchar(255) NOT NULL,\n    PRIMARY KEY (ID)\n  )\n`,\n  `\n  CREATE TABLE Participates (\n    team_id int NOT NULL REFERENCES Team(id),\n    meet_id int NOT NULL REFERENCES Meet(id),\n    placement int NOT NULL,\n    PRIMARY KEY (team_id, meet_id)\n  )\n`,\n];\n\nexport const Views = [];\n\nconst asyncQuery = (conn, query) => {\n  return new Promise((resolve, reject) => {\n    conn.query(query, (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows);\n    });\n  });\n};\n\nconst executeQueries = async (conn, queryArray) => {\n  return new Promise(async (resolve, reject) => {\n    for (let query of queryArray) {\n      try {\n        await asyncQuery(conn, query);\n      } catch (err) {\n        reject(err);\n      }\n    }\n    resolve();\n  });\n};\n\n// This is what callback hell looks like - should use async / await\nexport const seed = mode => {\n  const prod = mode === MODE_PRODUCTION;\n  // Create a separate connection for creating the database. Don't do this on\n  // prod as we only get one database\n  const initialConnection = prod\n    ? null\n    : mysql.createConnection({\n        host: 'localhost',\n        user: 'root',\n        password: process.env.MYSQL_PASSWORD,\n      });\n\n  const seedConnection = mysql.createConnection({\n    host: prod ? process.env.DATABASE_HOST : 'localhost',\n    user: prod ? process.env.MYSQL_USERNAME : 'root',\n    password: process.env.MYSQL_PASSWORD,\n    database: prod ? PRODUCTION_DB : TEST_DB,\n  });\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      if (!prod) {\n        await executeQueries(initialConnection, createDatabaseQueries);\n        initialConnection.end();\n      }\n      await executeQueries(seedConnection, Schemas);\n      await executeQueries(seedConnection, Views);\n      seedConnection.end();\n      process.exit(0);\n    } catch (err) {\n      console.log(err);\n    }\n  });\n};\n"]}