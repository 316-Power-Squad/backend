{"version":3,"sources":["../../server/helpers/db.js"],"names":["PRODUCTION_DB","TEST_DB","MODE_TEST","MODE_PRODUCTION","state","pool","mode","connect","done","createPool","host","user","password","process","env","MYSQL_PASSWORD","database","get","disconnect","end","queryAsync","query","params","resolve","reject","err","rows"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEO,IAAMA,wCAAgB,aAAtB;AACA,IAAMC,4BAAU,aAAhB;;AAEA,IAAMC,gCAAY,WAAlB;AACA,IAAMC,4CAAkB,iBAAxB;;AAEP,IAAIC,QAAQ;AACVC,QAAM,IADI;AAEVC,QAAM;AAFI,CAAZ;;AAKA,IAAMC,UAAU,SAAVA,OAAU,CAACD,IAAD,EAAOE,IAAP,EAAgB;AAC9BJ,QAAMC,IAAN,GAAa,gBAAMI,UAAN,CAAiB;AAC5BC,UAAM,WADsB;AAE5BC,UAAM,MAFsB;AAG5BC,cAAUC,QAAQC,GAAR,CAAYC,cAHM;AAI5B;AACAC,cAAUV,SAASH,eAAT,GAA2BH,aAA3B,GAA2CC;AALzB,GAAjB,CAAb;;AAQAG,QAAME,IAAN,GAAaA,IAAb;AACAE;AACD,CAXD;;AAaA,IAAMS,MAAM,SAANA,GAAM;AAAA,SAAMb,MAAMC,IAAZ;AAAA,CAAZ;;AAEA,IAAMa,aAAa,SAAbA,UAAa,GAAM;AACvBD,QAAME,GAAN;AACD,CAFD;;AAIA,IAAMC;AAAA,wEAAa,iBAAOC,KAAP,EAAcC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA,6CACV,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCpB,oBAAMC,IAAN,CAAWgB,KAAX,CAAiBA,KAAjB,EAAwBC,MAAxB,EAAgC,UAACG,GAAD,EAAMC,IAAN,EAAe;AAC7C,oBAAID,GAAJ,EAASD,OAAOC,GAAP,EAAT,KACKF,QAAQG,IAAR;AACN,eAHD;AAID,aALM,CADU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBASe;AACbnB,kBADa;AAEbU,UAFa;AAGbG,wBAHa;AAIbF;AAJa,C","file":"db.js","sourcesContent":["import mysql from 'mysql';\nimport async from 'async';\n\nexport const PRODUCTION_DB = 'atlargeprod';\nexport const TEST_DB = 'atlargetest';\n\nexport const MODE_TEST = 'MODE_TEST';\nexport const MODE_PRODUCTION = 'MODE_PRODUCTION';\n\nlet state = {\n  pool: null,\n  mode: null,\n};\n\nconst connect = (mode, done) => {\n  state.pool = mysql.createPool({\n    host: 'localhost',\n    user: 'root',\n    password: process.env.MYSQL_PASSWORD,\n    // password: 'Powersquad',\n    database: mode === MODE_PRODUCTION ? PRODUCTION_DB : TEST_DB,\n  });\n\n  state.mode = mode;\n  done();\n};\n\nconst get = () => state.pool;\n\nconst disconnect = () => {\n  get().end();\n};\n\nconst queryAsync = async (query, params) => {\n  return new Promise((resolve, reject) => {\n    state.pool.query(query, params, (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows);\n    });\n  });\n};\n\nexport default {\n  connect,\n  get,\n  queryAsync,\n  disconnect,\n};\n"]}